-- @path Source=/Simulink2SysML/MetaModels/SimulinkSourceMM.ecore

module Source2SourceWPorts;
create srcwports : Source from src : Source;

rule Model2Model {
	from
		mi: Source!Model
	to
		mo: Source!Model (
			Name <- mi.Name,
			Block <- mi.Block
		)
}

rule System2System {
	from
		bi: Source!System
	to
		bo: Source!System (
			Name <- bi.Name,
			ID <- bi.ID,
			Property <- bi.Property,
			Port <- thisModule.generateSequence(bi.getInportCount)->collect(i | thisModule.createInPort(i.toString() + thisModule.nameDelim + bi.getPortName(i, 'in') + thisModule.typeDelim))->
				union(thisModule.generateSequence(bi.getOutportCount)->collect(o | thisModule.createOutPort(o.toString() + thisModule.nameDelim + bi.getPortName(o, 'out') + thisModule.typeDelim)))->
				union(bi.Block->select(p |  p.isRootPortBlock)->collect(po | thisModule.PortBlock2Port(po))),
			Block <- bi.Block
		)
}

rule Block2Block {
	from
		bi: Source!Block
	to
		bo: Source!Block (
			Name <- bi.Name,
			ID <- bi.ID,
			Type <- bi.Type,
			Property <- bi.Property,
			Port <- thisModule.generateSequence(bi.getInportCount)->collect(i | thisModule.createInPort(i.toString() + thisModule.nameDelim + bi.getPortName(i, 'in') + thisModule.typeDelim + bi.getPortType))->
				union(thisModule.generateSequence(bi.getOutportCount)->collect(o | thisModule.createOutPort(o.toString() + thisModule.nameDelim + bi.getPortName(o, 'out') + thisModule.typeDelim + bi.getPortType)))
		)
}

lazy rule PortBlock2Port {
	from
		bi: Source!Block
	to
		p: Source!Port (
			Name <- bi.Name,
			Direction <- bi.getPortDirection,
			Num <- bi.getPortNum
		)
}

rule Property2Property {
	from
		pi: Source!Property (not pi.isPortsProperty)
	to
		po: Source!Property (
			Name <- pi.Name,
			Type <- pi.Type,
			Value <- pi.Value
		)
}

lazy rule createInPort {
	from
		i : String -- form of {num}#{Name} + thisModule.nameDelim + thisModule.typeDelim
	to
		p : Source!Port(
			Direction <- 'in',
			Num <- i.substring(1, i.indexOf(thisModule.nameDelim)).toInteger(),
			Name <- i.substring(i.indexOf(thisModule.nameDelim) + thisModule.nameDelim.size() + 1, i.indexOf(thisModule.typeDelim)),
			Type <- i.substring(i.indexOf(thisModule.typeDelim) + thisModule.typeDelim.size() + 1, i.size())
		)
}

lazy rule createOutPort {
	from
		o : String -- form of {num}#{Name}
	to
		p : Source!Port(
			Direction <- 'out',
			Num <- o.substring(1, o.indexOf(thisModule.nameDelim)).toInteger(),
			Name <- o.substring(o.indexOf(thisModule.nameDelim) + thisModule.nameDelim.size() + 1, o.indexOf(thisModule.typeDelim)),
			Type <- o.substring(o.indexOf(thisModule.typeDelim) + thisModule.typeDelim.size() + 1, o.size())
		)
}

helper def: nameDelim : String = '#n#';
helper def: typeDelim : String = '#t#';

helper def: InOutportKeywordList : Sequence(String) = Sequence{'Ports', 'PortCounts'}; -- we assume this results in [i, o] or [i] format, and that if both occur, they will be same value
helper def: InportBlockTypeList : Sequence(String) = Sequence{'Terminator', 'Outport', 'Gain', 'Switch', 'Abs', 'Stop', 'UnitDelay'};
helper def: InportBlockCountList : Sequence(String) = Sequence{1, 1, 1, 3, 1, 1, 1};
helper def: InportKeywordList : Sequence(String) = Sequence{'Inputs'}; -- we assume a single integer
helper def: OutportBlockTypeList : Sequence(String) = Sequence{'Inport', 'Constant', 'Gain', 'Switch', 'Abs', 'UnitDelay'};
helper def: OutportBlockCountList : Sequence(String) = Sequence{1, 1, 1, 1, 1, 1};
helper def: OutportKeywordList : Sequence(String) = Sequence{'Outputs'}; -- we assume a single integer

helper context Source!Component def: hasPortsProperty: Boolean =
	self.Property->exists(p | p.isPortsProperty);

helper context Source!Property def: isPortsProperty: Boolean =
	thisModule.InOutportKeywordList.includes(self.Name)
		or thisModule.InportKeywordList.includes(self.Name)
		or thisModule.OutportKeywordList.includes(self.Name);

helper context Source!Component def: needsInport: Boolean =
	thisModule.InportBlockTypeList.includes(self.Type);

helper context Source!Component def: needsOutport: Boolean =
	thisModule.OutportBlockTypeList.includes(self.Type);

helper context Source!Component def: getInportCount: Integer =
	if self.Property->exists(p | thisModule.InOutportKeywordList.includes(p.Name)) then
		self.Property->select(i | thisModule.InOutportKeywordList.includes(i.Name))->first().Value.getNFromArray(1)
	else
		if self.Property->exists(p | thisModule.InportKeywordList.includes(p.Name)) then
			self.Property->select(i | thisModule.InportKeywordList.includes(i.Name))->first().Value.toInteger()
		else
			if self.oclIsKindOf(Source!Block) then
				if thisModule.InportBlockTypeList.includes(self.Type) then
					thisModule.InportBlockCountList.at(thisModule.InportBlockTypeList.indexOf(self.Type))
				else
					0
				endif
			else
				0
			endif
		endif
	endif;

helper context Source!Component def: getOutportCount: Integer =
	if self.Property->exists(p | thisModule.InOutportKeywordList.includes(p.Name)) then
		self.Property->select(o | thisModule.InOutportKeywordList.includes(o.Name))->first().Value.getNFromArray(2)
	else
		if self.Property->exists(p | thisModule.OutportKeywordList.includes(p.Name)) then
			self.Property->select(o | thisModule.OutportKeywordList.includes(o.Name))->first().Value.toInteger()
		else
			if self.oclIsKindOf(Source!Block) then
				if thisModule.OutportBlockTypeList.includes(self.Type) then
					thisModule.OutportBlockCountList.at(thisModule.OutportBlockTypeList.indexOf(self.Type))
				else
					0
				endif
			else
				0
			endif
		endif
	endif;

helper context String def: getNFromArray(n : Integer): Integer =
	if self.split(',').size() >= n and self <> '[]' then
		self.substring(self.indexOf('[') + 2, self.indexOf(']')).split(',').at(n).trim().toInteger()
	else
		0
	endif;

helper context Source!Component def: isRootPortBlock: Boolean =
	if self.oclIsTypeOf(Source!Block) and self.refImmediateComposite().oclIsTypeOf(Source!System) then
		self.refImmediateComposite().ID = 'Root' and (self.Type = 'Inport' or self.Type = 'Outport')
	else
		false
	endif;

helper context Source!Block def: getPortDirection: String =
	self.Type.substring(1, self.Type.indexOf('port')).toLower();

helper context Source!Block def: getPortNum: Integer =
	self.Property->select(p | p.Name = 'Port')->
		collect(v | v.Value)->first().toInteger();


helper context Source!Component def: getPortName(num : Integer, dir : String): String = 
	self.Port->iterate(port; name : String = '' |
		if port.Num = num and port.Direction = dir then
			port.Name
		else
			name
		endif);

helper context Source!Component def: getPortType: String = 
	self.Property->iterate(prop; type : String = '' |
		if prop.Name = 'PortDimensions' then
			if prop.Type = 'Array:Int' then
				'Array:Float (' + prop.Value.getNFromArray(1) + ')'
			else
				if prop.Type = 'Int' and prop.Value <> '-1' then
					prop.Value
				else
					type
				endif
			endif
		else
			type
		endif);

helper def : generateSequence(num : Integer): Sequence(Integer) =
	if num = 0 then
		Sequence{}
	else if num = 1 then
			Sequence{1}
		else
			thisModule.generateSequence(num - 1).append(num)
		endif
	endif;