-- @path Simulink=/Simulink2SysML/MetaModels/SimulinkMM.ecore
-- @path Source=/Simulink2SysML/MetaModels/SimulinkSourceMM.ecore

module Simulink2Source;
create src : Source from sim : Simulink, defaults : Source;

rule ModelInformation2Model {
	from
		mi: Simulink!ModelInformation
	to
		mdl: Source!Model (
			Name <- mi.Model.Name,
			Block <- b
		),
		b: Source!System (
			Name <- mi.Model.Name,
			ID <- 'Root',
			Property <- mi.Model.System.Property,
			Block <- mi.Model.System.Block
		)
}

rule SubSystemBlock2System {
	from
		sub: Simulink!Block (sub.isSubsystemBlock)
	to
		b: Source!System(
			Name <- sub.Name,
			ID <- sub.SID,
			Block <- sub.System.Block,
			Property <- sub.Property->
				union(sub.Property->select(pos | pos.isFormattedPositionProperty)->collect(e | e.Value.Entry))->
				union(sub.System.Property)->
				union(Source!Property.allInstancesFrom('defaults')->
					select(dp | dp.refImmediateComposite().Type = sub.BlockType
						and not sub.Property->exists(sp | sp.Name = dp.Name))->
					collect(bp | thisModule.defaultProperty(bp))),
			Block <- sub.System.Block
		)
}

rule BlockWithSimPort2Block {
	from
		b: Simulink!Block (not b.isSubsystemBlock and b.isPortedBlock)
	to
		dst: Source!Block(
			Type <- b.BlockType,
			Name <- b.Name,
			ID <- b.SID,
			Property <- b.Property->
				union(b.Property->select(pos | pos.isFormattedPositionProperty)->collect(e | e.Value.Entry))->
				union(Source!Property.allInstancesFrom('defaults')->
					select(dp | dp.refImmediateComposite().Type = b.BlockType
						and not b.Property->exists(bp | bp.Name = dp.Name))->
					collect(blp | thisModule.defaultProperty(blp))),
			Port <- b.Port
		)
}

rule BlockWithListPort2Block {
	from
		b: Simulink!Block (not b.isSubsystemBlock and b.isListBlock)
	to
		dst: Source!Block(
			Type <- b.BlockType,
			Name <- b.Name,
			ID <- b.SID,
			Property <- b.Property->
				union(b.Property->select(pos | pos.isFormattedPositionProperty)->collect(e | e.Value.Entry))->
				union(Source!Property.allInstancesFrom('defaults')->
					select(dp | dp.refImmediateComposite().Type = b.BlockType
						and not b.Property->exists(bp | bp.Name = dp.Name))->
					collect(blp | thisModule.defaultProperty(blp))),
			Port <- b.List->select(lp | lp.ListType.endsWith('putPortNames'))
					->collect(l | l.Property)
		)
}

rule BlockWithoutSimListPort2Block {
	from
		b: Simulink!Block (not (b.isSubsystemBlock or b.isPortedBlock or b.isListBlock))
	to
		dst: Source!Block(
			Type <- b.BlockType,
			Name <- b.Name,
			ID <- b.SID,
			Property <- b.Property->
				union(b.Property->select(pos | pos.isFormattedPositionProperty)->collect(e | e.Value.Entry))->
				union(Source!Property.allInstancesFrom('defaults')->
					select(dp | dp.refImmediateComposite().Type = b.BlockType
						and not b.Property->exists(bp | bp.Name = dp.Name))->
					collect(blp | thisModule.defaultProperty(blp)))
		)
}

lazy rule defaultProperty {
	from
		dp: Source!Property
	to
		p: Source!Property(
			Name <- dp.Name,
			Type <- dp.Type,
			Value <- dp.Value
		)
}

rule createProperty(name : String, type : String, value : Integer) {
	to
		p: Source!Property(
			Name <- name,
			Type <- type,
			Value <- value.toString()
		)
}

rule Port2Port {
	from
		simp: Simulink!Port
	to
		p: Source!Port(
			Direction <- 'out',
			Num <- simp.PortNumber,
			Name <- simp.Name
		)
}

rule ListPort2Port {
	from
		lp: Simulink!Property (lp.isListProperty)
	to
		p: Source!Port (
			Direction <- lp.refImmediateComposite().getListPortType,
			Num <- lp.Name.getPortNum,
			Name <- lp.Value.Value
		)
}

rule SimpleProperty2Property {
	from
		simp: Simulink!Property (simp.isSimpleProperty and simp.shouldBeProcessed)
	to
		srcp: Source!Property(
			Name <- simp.getSystemProperty + simp.Name,
			Type <- simp.getPropertyType,
			Value <- simp.Value.Value.toString()
		)
}

rule ArrayProperty2Property {
	from
		p: Simulink!Property (not p.isSimpleProperty and p.shouldBeProcessed and not p.isFormattedPositionProperty)
	to
		srcp: Source!Property(
			Name <- p.getSystemProperty + p.Name,
			Type <- 'Array:' + p.Value.getArrayType,
			Value <- p.Value.arrayToString
		)
}

rule PositionEntry2Property {
	from
		e: Simulink!Entry (e.refImmediateComposite().refImmediateComposite().isFormattedPositionProperty)
	to
		p: Source!Property(
			Name <- 'Position-' + thisModule.positionNameList.at(e.Index + 1),
			Type <- e.refImmediateComposite().getArrayType,
			Value <- e.refImmediateComposite().getPositionValue(e.Index).toString()
		)
}

helper def: positionNameList : Sequence(String) = Sequence{'x', 'y', 'width', 'height'};

helper context Simulink!Property def: getSystemProperty: String =
	if self.refImmediateComposite().oclIsTypeOf(Simulink!System) then
		'System - '
	else
		''
	endif;

helper context Simulink!Property def: isSimpleProperty: Boolean =
	not self.Value.oclIsKindOf(Simulink!ValueArray);

helper context Simulink!Property def: isFormattedPositionProperty: Boolean =
	if self.Name = 'Position' then
		self.Value.Entry->size() = thisModule.positionNameList.size()
	else
		false
	endif;

helper context Simulink!Property def: shouldBeProcessed: Boolean =
	not (self.refImmediateComposite().oclIsTypeOf(Simulink!BlockParams)
	or self.refImmediateComposite().oclIsTypeOf(Simulink!Line)
	or self.refImmediateComposite().oclIsTypeOf(Simulink!Branch)
	or self.refImmediateComposite().oclIsTypeOf(Simulink!List)
	or self.refImmediateComposite().oclIsTypeOf(Simulink!Annotation)
	);
	
helper context Simulink!Property def: isListProperty: Boolean =
	if self.refImmediateComposite().oclIsTypeOf(Simulink!List) then
		self.refImmediateComposite().ListType.endsWith('putPortNames')
	else
		false
	endif;

helper context String def: getPortNum: Integer =
	if self.startsWith('port') then
		self.substring(5, self.size()).toInteger() + 1
	else
		0
	endif;
	
helper context Simulink!List def: getListPortType: String =
	if self.ListType.endsWith('putPortNames') then
		self.ListType.substring(1, self.ListType.indexOf('putPortNames')).toLower()
	else
		''
	endif;

helper context Simulink!Value def: getArrayType: String =
	if self.Entry->collect(e | e.Value.oclIsKindOf(Simulink!SimString))->includes(true) then
		'String'
	else
		if self.Entry->collect(e | e.Value.oclIsKindOf(Simulink!SimBool))->includes(true) then
			'Boolean'
		else
			if self.Entry->collect(e | e.Value.oclIsKindOf(Simulink!SimFloat))->includes(true) then
				'Float'
			else
				if self.Entry->collect(e | e.Value.oclIsKindOf(Simulink!SimInt))->includes(true) then
					'Int'
				else
					''
				endif
			endif
		endif
	endif;

helper context Simulink!Value def: arrayToString: String =
	'[' + self.Entry->collect(e | e)->
		iterate(ent; array : String = '' |
			array +
				if ent.Index > 0 then
					', '
				else
					''
				endif
				+ ent.Value.Value.toString()) + ']';

helper context Simulink!Value def: getPositionValue(i : Integer): Integer =
	if i <= 1 then
		self.getEntryValue(i)
	else
		self.getEntryValue(i) - self.getEntryValue(i - 2)
	endif;

helper context Simulink!Value def: getEntryValue(i : Integer): Integer =
	self.Entry->iterate(ent; val : Integer = 0 |
		if ent.Index = i then
			ent.Value.Value
		else
			val
		endif);
--	if self.Index <= 1 then
--		self.Value.Value.toString();
--	else
--		(self.Value.Value - self.refImmediateComposite()
--	endif;

helper context Simulink!Property def: getPropertyType: String =
	if self.Value.oclIsKindOf(Simulink!ValueArray) then
		'Array'
	else
		if self.Value.oclIsKindOf(Simulink!SimInt) then
			'Int'
		else
			if self.Value.oclIsKindOf(Simulink!SimFloat) then
				'Float'
			else
				if self.Value.oclIsKindOf(Simulink!SimBool) then
					'Boolean'
				else
					'String'
				endif
			endif
		endif
	endif;

helper context Simulink!Block def: isSubsystemBlock: Boolean =
	if self.oclIsKindOf(Simulink!SubSystemBlock) then
		true
	else
		false
	endif;

helper context Simulink!Block def: isPortedBlock: Boolean =
	self.Port.size() > 0;

--helper context Simulink!Block def: isPortedBlock: Boolean =
--	if self.oclIsKindOf(Simulink!SFunctionBlock) or self.oclIsKindOf(Simulink!BusSelectorBlock) then
--		true
--	else
--		false
--	endif;

helper context Simulink!Block def: isListBlock: Boolean =
	if self.oclIsKindOf(Simulink!ModelReferenceBlock) then
		true
	else
		false
	endif;
